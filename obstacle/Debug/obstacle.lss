
obstacle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000db6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000db6  00000e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007c  0080007c  00000e66  2**0
                  ALLOC
  3 .stab         0000135c  00000000  00000000  00000e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000045c  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00002620  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e9  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000624  00000000  00000000  00003a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c45  00000000  00000000  000040ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00004cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d6  00000000  00000000  00004f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080c  00000000  00000000  00005362  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 47 04 	call	0x88e	; 0x88e <main>
  8a:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DC_MOTOR_vInit>:

	void DC_MOTOR_vInit(void)
	{
		
	
	 DIO_vsetPINDir('D',0,1);
  92:	84 e4       	ldi	r24, 0x44	; 68
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',1,1);
  9c:	84 e4       	ldi	r24, 0x44	; 68
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',2,1);
  a6:	84 e4       	ldi	r24, 0x44	; 68
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',3,1);
  b0:	84 e4       	ldi	r24, 0x44	; 68
  b2:	63 e0       	ldi	r22, 0x03	; 3
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	 DIO_vsetPINDir('A',3,1);
  ba:	81 e4       	ldi	r24, 0x41	; 65
  bc:	63 e0       	ldi	r22, 0x03	; 3
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	 DIO_vsetPINDir('A',0,1);	
  c4:	81 e4       	ldi	r24, 0x41	; 65
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	SET_BIT(PORTD,2);
  ce:	92 9a       	sbi	0x12, 2	; 18
	SET_BIT(PORTD,3);
  d0:	93 9a       	sbi	0x12, 3	; 18
	 DIO_vsetPINDir('C',0,1);
  d2:	83 e4       	ldi	r24, 0x43	; 67
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',1,1);
  dc:	83 e4       	ldi	r24, 0x43	; 67
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',2,1);
  e6:	83 e4       	ldi	r24, 0x43	; 67
  e8:	62 e0       	ldi	r22, 0x02	; 2
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',3,1);
  f0:	83 e4       	ldi	r24, 0x43	; 67
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	 DIO_vsetPINDir('A',1,1);
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	 DIO_vsetPINDir('A',2,1);
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	SET_BIT(PORTC,2);
 10e:	aa 9a       	sbi	0x15, 2	; 21
	SET_BIT(PORTC,3);
 110:	ab 9a       	sbi	0x15, 3	; 21
	}
 112:	08 95       	ret

00000114 <motor_move_forward>:
	void motor_move_forward()
	{
	SET_BIT(PORTD,0);
 114:	90 9a       	sbi	0x12, 0	; 18
	SET_BIT(PORTA,1);
 116:	d9 9a       	sbi	0x1b, 1	; 27
	SET_BIT(PORTC,0);
 118:	a8 9a       	sbi	0x15, 0	; 21
	SET_BIT(PORTA,3);
 11a:	db 9a       	sbi	0x1b, 3	; 27
	CLR_BIT(PORTD,1);
 11c:	91 98       	cbi	0x12, 1	; 18
	CLR_BIT(PORTA,0);
 11e:	d8 98       	cbi	0x1b, 0	; 27
	CLR_BIT(PORTC,1);
 120:	a9 98       	cbi	0x15, 1	; 21
	CLR_BIT(PORTA,2);	
 122:	da 98       	cbi	0x1b, 2	; 27
	}
 124:	08 95       	ret

00000126 <motor_stop>:
		
	void motor_stop()
	{
		CLR_BIT(PORTD,0);
 126:	90 98       	cbi	0x12, 0	; 18
		CLR_BIT(PORTA,1);
 128:	d9 98       	cbi	0x1b, 1	; 27
		CLR_BIT(PORTC,0);
 12a:	a8 98       	cbi	0x15, 0	; 21
		CLR_BIT(PORTA,3);
 12c:	db 98       	cbi	0x1b, 3	; 27
		CLR_BIT(PORTD,1);
 12e:	91 98       	cbi	0x12, 1	; 18
		CLR_BIT(PORTA,0);
 130:	d8 98       	cbi	0x1b, 0	; 27
		CLR_BIT(PORTC,1);
 132:	a9 98       	cbi	0x15, 1	; 21
		CLR_BIT(PORTA,2);
 134:	da 98       	cbi	0x1b, 2	; 27
			
	}
 136:	08 95       	ret

00000138 <motor_move_left>:
	void motor_move_left()
	{
		
		SET_BIT(PORTA,3);
 138:	db 9a       	sbi	0x1b, 3	; 27
		SET_BIT(PORTD,0);
 13a:	90 9a       	sbi	0x12, 0	; 18
		
	}
 13c:	08 95       	ret

0000013e <motor_move_right>:
	void motor_move_right()
	{
		
		SET_BIT(PORTC,0);
 13e:	a8 9a       	sbi	0x15, 0	; 21
		SET_BIT(PORTA,1);
 140:	d9 9a       	sbi	0x1b, 1	; 27
		
	}	
 142:	08 95       	ret

00000144 <motor_move_backward>:
   void motor_move_backward()
   {
	   SET_BIT(PORTD,1);
 144:	91 9a       	sbi	0x12, 1	; 18
	   SET_BIT(PORTA,0);
 146:	d8 9a       	sbi	0x1b, 0	; 27
	   SET_BIT(PORTC,1);
 148:	a9 9a       	sbi	0x15, 1	; 21
	   SET_BIT(PORTA,2);
 14a:	da 9a       	sbi	0x1b, 2	; 27
   }
 14c:	08 95       	ret

0000014e <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
 14e:	82 34       	cpi	r24, 0x42	; 66
 150:	51 f1       	breq	.+84     	; 0x1a6 <DIO_vsetPINDir+0x58>
 152:	83 34       	cpi	r24, 0x43	; 67
 154:	20 f4       	brcc	.+8      	; 0x15e <DIO_vsetPINDir+0x10>
 156:	81 34       	cpi	r24, 0x41	; 65
 158:	09 f0       	breq	.+2      	; 0x15c <DIO_vsetPINDir+0xe>
 15a:	7b c0       	rjmp	.+246    	; 0x252 <DIO_vsetPINDir+0x104>
 15c:	07 c0       	rjmp	.+14     	; 0x16c <DIO_vsetPINDir+0x1e>
 15e:	83 34       	cpi	r24, 0x43	; 67
 160:	09 f4       	brne	.+2      	; 0x164 <DIO_vsetPINDir+0x16>
 162:	3e c0       	rjmp	.+124    	; 0x1e0 <DIO_vsetPINDir+0x92>
 164:	84 34       	cpi	r24, 0x44	; 68
 166:	09 f0       	breq	.+2      	; 0x16a <DIO_vsetPINDir+0x1c>
 168:	74 c0       	rjmp	.+232    	; 0x252 <DIO_vsetPINDir+0x104>
 16a:	57 c0       	rjmp	.+174    	; 0x21a <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	69 f4       	brne	.+26     	; 0x18a <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
 170:	2a b3       	in	r18, 0x1a	; 26
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	ac 01       	movw	r20, r24
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_vsetPINDir+0x30>
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_vsetPINDir+0x2c>
 182:	ba 01       	movw	r22, r20
 184:	62 2b       	or	r22, r18
 186:	6a bb       	out	0x1a, r22	; 26
 188:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
 18a:	2a b3       	in	r18, 0x1a	; 26
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	ac 01       	movw	r20, r24
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_vsetPINDir+0x4a>
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_vsetPINDir+0x46>
 19c:	ba 01       	movw	r22, r20
 19e:	60 95       	com	r22
 1a0:	62 23       	and	r22, r18
 1a2:	6a bb       	out	0x1a, r22	; 26
 1a4:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 1a6:	41 30       	cpi	r20, 0x01	; 1
 1a8:	69 f4       	brne	.+26     	; 0x1c4 <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 1aa:	27 b3       	in	r18, 0x17	; 23
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	ac 01       	movw	r20, r24
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_vsetPINDir+0x6a>
 1b4:	44 0f       	add	r20, r20
 1b6:	55 1f       	adc	r21, r21
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_vsetPINDir+0x66>
 1bc:	ba 01       	movw	r22, r20
 1be:	62 2b       	or	r22, r18
 1c0:	67 bb       	out	0x17, r22	; 23
 1c2:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 1c4:	27 b3       	in	r18, 0x17	; 23
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	ac 01       	movw	r20, r24
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_vsetPINDir+0x84>
 1ce:	44 0f       	add	r20, r20
 1d0:	55 1f       	adc	r21, r21
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_vsetPINDir+0x80>
 1d6:	ba 01       	movw	r22, r20
 1d8:	60 95       	com	r22
 1da:	62 23       	and	r22, r18
 1dc:	67 bb       	out	0x17, r22	; 23
 1de:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	69 f4       	brne	.+26     	; 0x1fe <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 1e4:	24 b3       	in	r18, 0x14	; 20
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	ac 01       	movw	r20, r24
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_vsetPINDir+0xa4>
 1ee:	44 0f       	add	r20, r20
 1f0:	55 1f       	adc	r21, r21
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_vsetPINDir+0xa0>
 1f6:	ba 01       	movw	r22, r20
 1f8:	62 2b       	or	r22, r18
 1fa:	64 bb       	out	0x14, r22	; 20
 1fc:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 1fe:	24 b3       	in	r18, 0x14	; 20
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	ac 01       	movw	r20, r24
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_vsetPINDir+0xbe>
 208:	44 0f       	add	r20, r20
 20a:	55 1f       	adc	r21, r21
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_vsetPINDir+0xba>
 210:	ba 01       	movw	r22, r20
 212:	60 95       	com	r22
 214:	62 23       	and	r22, r18
 216:	64 bb       	out	0x14, r22	; 20
 218:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 21a:	41 30       	cpi	r20, 0x01	; 1
 21c:	69 f4       	brne	.+26     	; 0x238 <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 21e:	21 b3       	in	r18, 0x11	; 17
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	ac 01       	movw	r20, r24
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_vsetPINDir+0xde>
 228:	44 0f       	add	r20, r20
 22a:	55 1f       	adc	r21, r21
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_vsetPINDir+0xda>
 230:	ba 01       	movw	r22, r20
 232:	62 2b       	or	r22, r18
 234:	61 bb       	out	0x11, r22	; 17
 236:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 238:	21 b3       	in	r18, 0x11	; 17
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	ac 01       	movw	r20, r24
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_vsetPINDir+0xf8>
 242:	44 0f       	add	r20, r20
 244:	55 1f       	adc	r21, r21
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_vsetPINDir+0xf4>
 24a:	ba 01       	movw	r22, r20
 24c:	60 95       	com	r22
 24e:	62 23       	and	r22, r18
 250:	61 bb       	out	0x11, r22	; 17
 252:	08 95       	ret

00000254 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 254:	82 34       	cpi	r24, 0x42	; 66
 256:	51 f1       	breq	.+84     	; 0x2ac <DIO_write+0x58>
 258:	83 34       	cpi	r24, 0x43	; 67
 25a:	20 f4       	brcc	.+8      	; 0x264 <DIO_write+0x10>
 25c:	81 34       	cpi	r24, 0x41	; 65
 25e:	09 f0       	breq	.+2      	; 0x262 <DIO_write+0xe>
 260:	7b c0       	rjmp	.+246    	; 0x358 <DIO_write+0x104>
 262:	07 c0       	rjmp	.+14     	; 0x272 <DIO_write+0x1e>
 264:	83 34       	cpi	r24, 0x43	; 67
 266:	09 f4       	brne	.+2      	; 0x26a <DIO_write+0x16>
 268:	3e c0       	rjmp	.+124    	; 0x2e6 <DIO_write+0x92>
 26a:	84 34       	cpi	r24, 0x44	; 68
 26c:	09 f0       	breq	.+2      	; 0x270 <DIO_write+0x1c>
 26e:	74 c0       	rjmp	.+232    	; 0x358 <DIO_write+0x104>
 270:	57 c0       	rjmp	.+174    	; 0x320 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 272:	41 30       	cpi	r20, 0x01	; 1
 274:	69 f4       	brne	.+26     	; 0x290 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 276:	2b b3       	in	r18, 0x1b	; 27
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	ac 01       	movw	r20, r24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_write+0x30>
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_write+0x2c>
 288:	ba 01       	movw	r22, r20
 28a:	62 2b       	or	r22, r18
 28c:	6b bb       	out	0x1b, r22	; 27
 28e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 290:	2b b3       	in	r18, 0x1b	; 27
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	ac 01       	movw	r20, r24
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_write+0x4a>
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_write+0x46>
 2a2:	ba 01       	movw	r22, r20
 2a4:	60 95       	com	r22
 2a6:	62 23       	and	r22, r18
 2a8:	6b bb       	out	0x1b, r22	; 27
 2aa:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 2ac:	41 30       	cpi	r20, 0x01	; 1
 2ae:	69 f4       	brne	.+26     	; 0x2ca <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 2b0:	28 b3       	in	r18, 0x18	; 24
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	ac 01       	movw	r20, r24
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_write+0x6a>
 2ba:	44 0f       	add	r20, r20
 2bc:	55 1f       	adc	r21, r21
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_write+0x66>
 2c2:	ba 01       	movw	r22, r20
 2c4:	62 2b       	or	r22, r18
 2c6:	68 bb       	out	0x18, r22	; 24
 2c8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 2ca:	28 b3       	in	r18, 0x18	; 24
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	ac 01       	movw	r20, r24
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_write+0x84>
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_write+0x80>
 2dc:	ba 01       	movw	r22, r20
 2de:	60 95       	com	r22
 2e0:	62 23       	and	r22, r18
 2e2:	68 bb       	out	0x18, r22	; 24
 2e4:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 2e6:	41 30       	cpi	r20, 0x01	; 1
 2e8:	69 f4       	brne	.+26     	; 0x304 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 2ea:	25 b3       	in	r18, 0x15	; 21
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	ac 01       	movw	r20, r24
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_write+0xa4>
 2f4:	44 0f       	add	r20, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_write+0xa0>
 2fc:	ba 01       	movw	r22, r20
 2fe:	62 2b       	or	r22, r18
 300:	65 bb       	out	0x15, r22	; 21
 302:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 304:	25 b3       	in	r18, 0x15	; 21
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	ac 01       	movw	r20, r24
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_write+0xbe>
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_write+0xba>
 316:	ba 01       	movw	r22, r20
 318:	60 95       	com	r22
 31a:	62 23       	and	r22, r18
 31c:	65 bb       	out	0x15, r22	; 21
 31e:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	69 f4       	brne	.+26     	; 0x33e <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 324:	22 b3       	in	r18, 0x12	; 18
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	ac 01       	movw	r20, r24
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_write+0xde>
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_write+0xda>
 336:	ba 01       	movw	r22, r20
 338:	62 2b       	or	r22, r18
 33a:	62 bb       	out	0x12, r22	; 18
 33c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 33e:	22 b3       	in	r18, 0x12	; 18
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	ac 01       	movw	r20, r24
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_write+0xf8>
 348:	44 0f       	add	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_write+0xf4>
 350:	ba 01       	movw	r22, r20
 352:	60 95       	com	r22
 354:	62 23       	and	r22, r18
 356:	62 bb       	out	0x12, r22	; 18
 358:	08 95       	ret

0000035a <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 35a:	82 34       	cpi	r24, 0x42	; 66
 35c:	f1 f0       	breq	.+60     	; 0x39a <DIO_u8read+0x40>
 35e:	83 34       	cpi	r24, 0x43	; 67
 360:	20 f4       	brcc	.+8      	; 0x36a <DIO_u8read+0x10>
 362:	81 34       	cpi	r24, 0x41	; 65
 364:	09 f0       	breq	.+2      	; 0x368 <DIO_u8read+0xe>
 366:	4f c0       	rjmp	.+158    	; 0x406 <DIO_u8read+0xac>
 368:	06 c0       	rjmp	.+12     	; 0x376 <DIO_u8read+0x1c>
 36a:	83 34       	cpi	r24, 0x43	; 67
 36c:	41 f1       	breq	.+80     	; 0x3be <DIO_u8read+0x64>
 36e:	84 34       	cpi	r24, 0x44	; 68
 370:	09 f0       	breq	.+2      	; 0x374 <DIO_u8read+0x1a>
 372:	49 c0       	rjmp	.+146    	; 0x406 <DIO_u8read+0xac>
 374:	36 c0       	rjmp	.+108    	; 0x3e2 <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 376:	29 b3       	in	r18, 0x19	; 25
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	06 2e       	mov	r0, r22
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_u8read+0x2a>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_u8read+0x26>
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	82 23       	and	r24, r18
 38c:	93 23       	and	r25, r19
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_u8read+0x3a>
 390:	95 95       	asr	r25
 392:	87 95       	ror	r24
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_u8read+0x36>
		break;
 398:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 39a:	26 b3       	in	r18, 0x16	; 22
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	06 2e       	mov	r0, r22
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_u8read+0x4e>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	0a 94       	dec	r0
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_u8read+0x4a>
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	82 23       	and	r24, r18
 3b0:	93 23       	and	r25, r19
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_u8read+0x5e>
 3b4:	95 95       	asr	r25
 3b6:	87 95       	ror	r24
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_u8read+0x5a>
		break;
 3bc:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 3be:	23 b3       	in	r18, 0x13	; 19
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	06 2e       	mov	r0, r22
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_u8read+0x72>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_u8read+0x6e>
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	82 23       	and	r24, r18
 3d4:	93 23       	and	r25, r19
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8read+0x82>
 3d8:	95 95       	asr	r25
 3da:	87 95       	ror	r24
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8read+0x7e>
		break;
 3e0:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 3e2:	20 b3       	in	r18, 0x10	; 16
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	06 2e       	mov	r0, r22
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_u8read+0x96>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	0a 94       	dec	r0
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_u8read+0x92>
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	82 23       	and	r24, r18
 3f8:	93 23       	and	r25, r19
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_u8read+0xa6>
 3fc:	95 95       	asr	r25
 3fe:	87 95       	ror	r24
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_u8read+0xa2>
		break;
 404:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 406:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 408:	08 95       	ret

0000040a <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 40a:	82 34       	cpi	r24, 0x42	; 66
 40c:	b9 f0       	breq	.+46     	; 0x43c <DIO_toggle+0x32>
 40e:	83 34       	cpi	r24, 0x43	; 67
 410:	18 f4       	brcc	.+6      	; 0x418 <DIO_toggle+0xe>
 412:	81 34       	cpi	r24, 0x41	; 65
 414:	c9 f5       	brne	.+114    	; 0x488 <DIO_toggle+0x7e>
 416:	05 c0       	rjmp	.+10     	; 0x422 <DIO_toggle+0x18>
 418:	83 34       	cpi	r24, 0x43	; 67
 41a:	e9 f0       	breq	.+58     	; 0x456 <DIO_toggle+0x4c>
 41c:	84 34       	cpi	r24, 0x44	; 68
 41e:	a1 f5       	brne	.+104    	; 0x488 <DIO_toggle+0x7e>
 420:	27 c0       	rjmp	.+78     	; 0x470 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 422:	2b b3       	in	r18, 0x1b	; 27
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	ac 01       	movw	r20, r24
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_toggle+0x26>
 42c:	44 0f       	add	r20, r20
 42e:	55 1f       	adc	r21, r21
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_toggle+0x22>
 434:	ba 01       	movw	r22, r20
 436:	62 27       	eor	r22, r18
 438:	6b bb       	out	0x1b, r22	; 27
		break;
 43a:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 43c:	28 b3       	in	r18, 0x18	; 24
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	ac 01       	movw	r20, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_toggle+0x40>
 446:	44 0f       	add	r20, r20
 448:	55 1f       	adc	r21, r21
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_toggle+0x3c>
 44e:	ba 01       	movw	r22, r20
 450:	62 27       	eor	r22, r18
 452:	68 bb       	out	0x18, r22	; 24
		break;
 454:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 456:	25 b3       	in	r18, 0x15	; 21
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	ac 01       	movw	r20, r24
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_toggle+0x5a>
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_toggle+0x56>
 468:	ba 01       	movw	r22, r20
 46a:	62 27       	eor	r22, r18
 46c:	65 bb       	out	0x15, r22	; 21
		break;
 46e:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 470:	22 b3       	in	r18, 0x12	; 18
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	ac 01       	movw	r20, r24
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_toggle+0x74>
 47a:	44 0f       	add	r20, r20
 47c:	55 1f       	adc	r21, r21
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_toggle+0x70>
 482:	ba 01       	movw	r22, r20
 484:	62 27       	eor	r22, r18
 486:	62 bb       	out	0x12, r22	; 18
 488:	08 95       	ret

0000048a <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 48a:	82 34       	cpi	r24, 0x42	; 66
 48c:	61 f0       	breq	.+24     	; 0x4a6 <DIO_set_port_direction+0x1c>
 48e:	83 34       	cpi	r24, 0x43	; 67
 490:	18 f4       	brcc	.+6      	; 0x498 <DIO_set_port_direction+0xe>
 492:	81 34       	cpi	r24, 0x41	; 65
 494:	69 f4       	brne	.+26     	; 0x4b0 <DIO_set_port_direction+0x26>
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <DIO_set_port_direction+0x18>
 498:	83 34       	cpi	r24, 0x43	; 67
 49a:	39 f0       	breq	.+14     	; 0x4aa <DIO_set_port_direction+0x20>
 49c:	84 34       	cpi	r24, 0x44	; 68
 49e:	41 f4       	brne	.+16     	; 0x4b0 <DIO_set_port_direction+0x26>
 4a0:	06 c0       	rjmp	.+12     	; 0x4ae <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 4a2:	6a bb       	out	0x1a, r22	; 26
		break ;
 4a4:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 4a6:	67 bb       	out	0x17, r22	; 23
		break ;
 4a8:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 4aa:	64 bb       	out	0x14, r22	; 20
		break ;
 4ac:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 4ae:	61 bb       	out	0x11, r22	; 17
 4b0:	08 95       	ret

000004b2 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 4b2:	82 34       	cpi	r24, 0x42	; 66
 4b4:	61 f0       	breq	.+24     	; 0x4ce <DIO_write_port+0x1c>
 4b6:	83 34       	cpi	r24, 0x43	; 67
 4b8:	18 f4       	brcc	.+6      	; 0x4c0 <DIO_write_port+0xe>
 4ba:	81 34       	cpi	r24, 0x41	; 65
 4bc:	69 f4       	brne	.+26     	; 0x4d8 <DIO_write_port+0x26>
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <DIO_write_port+0x18>
 4c0:	83 34       	cpi	r24, 0x43	; 67
 4c2:	39 f0       	breq	.+14     	; 0x4d2 <DIO_write_port+0x20>
 4c4:	84 34       	cpi	r24, 0x44	; 68
 4c6:	41 f4       	brne	.+16     	; 0x4d8 <DIO_write_port+0x26>
 4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 4ca:	6b bb       	out	0x1b, r22	; 27
		break ;
 4cc:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 4ce:	68 bb       	out	0x18, r22	; 24
		break ;
 4d0:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 4d2:	65 bb       	out	0x15, r22	; 21
		break ;
 4d4:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 4d6:	62 bb       	out	0x12, r22	; 18
 4d8:	08 95       	ret

000004da <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 4da:	82 34       	cpi	r24, 0x42	; 66
 4dc:	61 f0       	breq	.+24     	; 0x4f6 <DIO_read_port+0x1c>
 4de:	83 34       	cpi	r24, 0x43	; 67
 4e0:	18 f4       	brcc	.+6      	; 0x4e8 <DIO_read_port+0xe>
 4e2:	81 34       	cpi	r24, 0x41	; 65
 4e4:	71 f4       	brne	.+28     	; 0x502 <DIO_read_port+0x28>
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <DIO_read_port+0x18>
 4e8:	83 34       	cpi	r24, 0x43	; 67
 4ea:	39 f0       	breq	.+14     	; 0x4fa <DIO_read_port+0x20>
 4ec:	84 34       	cpi	r24, 0x44	; 68
 4ee:	49 f4       	brne	.+18     	; 0x502 <DIO_read_port+0x28>
 4f0:	06 c0       	rjmp	.+12     	; 0x4fe <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 4f2:	89 b3       	in	r24, 0x19	; 25
		break ;
 4f4:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 4f6:	86 b3       	in	r24, 0x16	; 22
		break ;
 4f8:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 4fa:	83 b3       	in	r24, 0x13	; 19
		break ;
 4fc:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 4fe:	80 b3       	in	r24, 0x10	; 16
		break ;
 500:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 502:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 504:	08 95       	ret

00000506 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 506:	82 34       	cpi	r24, 0x42	; 66
 508:	51 f1       	breq	.+84     	; 0x55e <DIO_vconnectpullup+0x58>
 50a:	83 34       	cpi	r24, 0x43	; 67
 50c:	20 f4       	brcc	.+8      	; 0x516 <DIO_vconnectpullup+0x10>
 50e:	81 34       	cpi	r24, 0x41	; 65
 510:	09 f0       	breq	.+2      	; 0x514 <DIO_vconnectpullup+0xe>
 512:	7b c0       	rjmp	.+246    	; 0x60a <DIO_vconnectpullup+0x104>
 514:	07 c0       	rjmp	.+14     	; 0x524 <DIO_vconnectpullup+0x1e>
 516:	83 34       	cpi	r24, 0x43	; 67
 518:	09 f4       	brne	.+2      	; 0x51c <DIO_vconnectpullup+0x16>
 51a:	3e c0       	rjmp	.+124    	; 0x598 <DIO_vconnectpullup+0x92>
 51c:	84 34       	cpi	r24, 0x44	; 68
 51e:	09 f0       	breq	.+2      	; 0x522 <DIO_vconnectpullup+0x1c>
 520:	74 c0       	rjmp	.+232    	; 0x60a <DIO_vconnectpullup+0x104>
 522:	57 c0       	rjmp	.+174    	; 0x5d2 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 524:	41 30       	cpi	r20, 0x01	; 1
 526:	69 f4       	brne	.+26     	; 0x542 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 528:	2b b3       	in	r18, 0x1b	; 27
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	ac 01       	movw	r20, r24
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_vconnectpullup+0x30>
 532:	44 0f       	add	r20, r20
 534:	55 1f       	adc	r21, r21
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_vconnectpullup+0x2c>
 53a:	ba 01       	movw	r22, r20
 53c:	62 2b       	or	r22, r18
 53e:	6b bb       	out	0x1b, r22	; 27
 540:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 542:	2b b3       	in	r18, 0x1b	; 27
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	ac 01       	movw	r20, r24
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_vconnectpullup+0x4a>
 54c:	44 0f       	add	r20, r20
 54e:	55 1f       	adc	r21, r21
 550:	6a 95       	dec	r22
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_vconnectpullup+0x46>
 554:	ba 01       	movw	r22, r20
 556:	60 95       	com	r22
 558:	62 23       	and	r22, r18
 55a:	6b bb       	out	0x1b, r22	; 27
 55c:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 55e:	41 30       	cpi	r20, 0x01	; 1
 560:	69 f4       	brne	.+26     	; 0x57c <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 562:	28 b3       	in	r18, 0x18	; 24
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	ac 01       	movw	r20, r24
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_vconnectpullup+0x6a>
 56c:	44 0f       	add	r20, r20
 56e:	55 1f       	adc	r21, r21
 570:	6a 95       	dec	r22
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_vconnectpullup+0x66>
 574:	ba 01       	movw	r22, r20
 576:	62 2b       	or	r22, r18
 578:	68 bb       	out	0x18, r22	; 24
 57a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 57c:	28 b3       	in	r18, 0x18	; 24
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	ac 01       	movw	r20, r24
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_vconnectpullup+0x84>
 586:	44 0f       	add	r20, r20
 588:	55 1f       	adc	r21, r21
 58a:	6a 95       	dec	r22
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_vconnectpullup+0x80>
 58e:	ba 01       	movw	r22, r20
 590:	60 95       	com	r22
 592:	62 23       	and	r22, r18
 594:	68 bb       	out	0x18, r22	; 24
 596:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 598:	41 30       	cpi	r20, 0x01	; 1
 59a:	69 f4       	brne	.+26     	; 0x5b6 <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 59c:	25 b3       	in	r18, 0x15	; 21
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	ac 01       	movw	r20, r24
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_vconnectpullup+0xa4>
 5a6:	44 0f       	add	r20, r20
 5a8:	55 1f       	adc	r21, r21
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_vconnectpullup+0xa0>
 5ae:	ba 01       	movw	r22, r20
 5b0:	62 2b       	or	r22, r18
 5b2:	65 bb       	out	0x15, r22	; 21
 5b4:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 5b6:	25 b3       	in	r18, 0x15	; 21
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	ac 01       	movw	r20, r24
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_vconnectpullup+0xbe>
 5c0:	44 0f       	add	r20, r20
 5c2:	55 1f       	adc	r21, r21
 5c4:	6a 95       	dec	r22
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_vconnectpullup+0xba>
 5c8:	ba 01       	movw	r22, r20
 5ca:	60 95       	com	r22
 5cc:	62 23       	and	r22, r18
 5ce:	65 bb       	out	0x15, r22	; 21
 5d0:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 5d2:	41 30       	cpi	r20, 0x01	; 1
 5d4:	69 f4       	brne	.+26     	; 0x5f0 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 5d6:	22 b3       	in	r18, 0x12	; 18
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	ac 01       	movw	r20, r24
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_vconnectpullup+0xde>
 5e0:	44 0f       	add	r20, r20
 5e2:	55 1f       	adc	r21, r21
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_vconnectpullup+0xda>
 5e8:	ba 01       	movw	r22, r20
 5ea:	62 2b       	or	r22, r18
 5ec:	62 bb       	out	0x12, r22	; 18
 5ee:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 5f0:	22 b3       	in	r18, 0x12	; 18
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	ac 01       	movw	r20, r24
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_vconnectpullup+0xf8>
 5fa:	44 0f       	add	r20, r20
 5fc:	55 1f       	adc	r21, r21
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_vconnectpullup+0xf4>
 602:	ba 01       	movw	r22, r20
 604:	60 95       	com	r22
 606:	62 23       	and	r22, r18
 608:	62 bb       	out	0x12, r22	; 18
 60a:	08 95       	ret

0000060c <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
 60c:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 60e:	82 34       	cpi	r24, 0x42	; 66
 610:	81 f0       	breq	.+32     	; 0x632 <write_low_nibble+0x26>
 612:	83 34       	cpi	r24, 0x43	; 67
 614:	18 f4       	brcc	.+6      	; 0x61c <write_low_nibble+0x10>
 616:	81 34       	cpi	r24, 0x41	; 65
 618:	f1 f4       	brne	.+60     	; 0x656 <write_low_nibble+0x4a>
 61a:	05 c0       	rjmp	.+10     	; 0x626 <write_low_nibble+0x1a>
 61c:	83 34       	cpi	r24, 0x43	; 67
 61e:	79 f0       	breq	.+30     	; 0x63e <write_low_nibble+0x32>
 620:	84 34       	cpi	r24, 0x44	; 68
 622:	c9 f4       	brne	.+50     	; 0x656 <write_low_nibble+0x4a>
 624:	12 c0       	rjmp	.+36     	; 0x64a <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
 626:	8b b3       	in	r24, 0x1b	; 27
 628:	80 7f       	andi	r24, 0xF0	; 240
 62a:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 62c:	8b b3       	in	r24, 0x1b	; 27
 62e:	86 2b       	or	r24, r22
 630:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
 632:	88 b3       	in	r24, 0x18	; 24
 634:	80 7f       	andi	r24, 0xF0	; 240
 636:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 638:	88 b3       	in	r24, 0x18	; 24
 63a:	86 2b       	or	r24, r22
 63c:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
 63e:	85 b3       	in	r24, 0x15	; 21
 640:	80 7f       	andi	r24, 0xF0	; 240
 642:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 644:	85 b3       	in	r24, 0x15	; 21
 646:	86 2b       	or	r24, r22
 648:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
 64a:	82 b3       	in	r24, 0x12	; 18
 64c:	80 7f       	andi	r24, 0xF0	; 240
 64e:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 650:	82 b3       	in	r24, 0x12	; 18
 652:	68 2b       	or	r22, r24
 654:	62 bb       	out	0x12, r22	; 18
 656:	08 95       	ret

00000658 <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 658:	62 95       	swap	r22
 65a:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 65c:	82 34       	cpi	r24, 0x42	; 66
 65e:	81 f0       	breq	.+32     	; 0x680 <write_high_nibble+0x28>
 660:	83 34       	cpi	r24, 0x43	; 67
 662:	18 f4       	brcc	.+6      	; 0x66a <write_high_nibble+0x12>
 664:	81 34       	cpi	r24, 0x41	; 65
 666:	f1 f4       	brne	.+60     	; 0x6a4 <write_high_nibble+0x4c>
 668:	05 c0       	rjmp	.+10     	; 0x674 <write_high_nibble+0x1c>
 66a:	83 34       	cpi	r24, 0x43	; 67
 66c:	79 f0       	breq	.+30     	; 0x68c <write_high_nibble+0x34>
 66e:	84 34       	cpi	r24, 0x44	; 68
 670:	c9 f4       	brne	.+50     	; 0x6a4 <write_high_nibble+0x4c>
 672:	12 c0       	rjmp	.+36     	; 0x698 <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
 674:	8b b3       	in	r24, 0x1b	; 27
 676:	8f 70       	andi	r24, 0x0F	; 15
 678:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 67a:	8b b3       	in	r24, 0x1b	; 27
 67c:	86 2b       	or	r24, r22
 67e:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 680:	88 b3       	in	r24, 0x18	; 24
 682:	8f 70       	andi	r24, 0x0F	; 15
 684:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 686:	88 b3       	in	r24, 0x18	; 24
 688:	86 2b       	or	r24, r22
 68a:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 68c:	85 b3       	in	r24, 0x15	; 21
 68e:	8f 70       	andi	r24, 0x0F	; 15
 690:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 692:	85 b3       	in	r24, 0x15	; 21
 694:	86 2b       	or	r24, r22
 696:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 698:	82 b3       	in	r24, 0x12	; 18
 69a:	8f 70       	andi	r24, 0x0F	; 15
 69c:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 69e:	82 b3       	in	r24, 0x12	; 18
 6a0:	68 2b       	or	r22, r24
 6a2:	62 bb       	out	0x12, r22	; 18
 6a4:	08 95       	ret

000006a6 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
 6a6:	82 e4       	ldi	r24, 0x42	; 66
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	41 e0       	ldi	r20, 0x01	; 1
 6ac:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6b0:	8f e9       	ldi	r24, 0x9F	; 159
 6b2:	9f e0       	ldi	r25, 0x0F	; 15
 6b4:	01 97       	sbiw	r24, 0x01	; 1
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <send_falling_edge+0xe>
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <send_falling_edge+0x14>
 6ba:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 6bc:	82 e4       	ldi	r24, 0x42	; 66
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	40 e0       	ldi	r20, 0x00	; 0
 6c2:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_write>
 6c6:	8f e9       	ldi	r24, 0x9F	; 159
 6c8:	9f e0       	ldi	r25, 0x0F	; 15
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <send_falling_edge+0x24>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <send_falling_edge+0x2a>
 6d0:	00 00       	nop
	_delay_ms(2);
}
 6d2:	08 95       	ret

000006d4 <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
 6d4:	cf 93       	push	r28
 6d6:	c8 2f       	mov	r28, r24
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',cmd>>4);
 6d8:	68 2f       	mov	r22, r24
 6da:	62 95       	swap	r22
 6dc:	6f 70       	andi	r22, 0x0F	; 15
 6de:	81 e4       	ldi	r24, 0x41	; 65
 6e0:	0e 94 2c 03 	call	0x658	; 0x658 <write_high_nibble>
	DIO_write('B',RS,0);
 6e4:	82 e4       	ldi	r24, 0x42	; 66
 6e6:	61 e0       	ldi	r22, 0x01	; 1
 6e8:	40 e0       	ldi	r20, 0x00	; 0
 6ea:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_write>
	send_falling_edge();
 6ee:	0e 94 53 03 	call	0x6a6	; 0x6a6 <send_falling_edge>
	write_high_nibble('A',cmd);
 6f2:	81 e4       	ldi	r24, 0x41	; 65
 6f4:	6c 2f       	mov	r22, r28
 6f6:	0e 94 2c 03 	call	0x658	; 0x658 <write_high_nibble>
	DIO_write('B',RS,0);
 6fa:	82 e4       	ldi	r24, 0x42	; 66
 6fc:	61 e0       	ldi	r22, 0x01	; 1
 6fe:	40 e0       	ldi	r20, 0x00	; 0
 700:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_write>
	send_falling_edge();
 704:	0e 94 53 03 	call	0x6a6	; 0x6a6 <send_falling_edge>
 708:	8f ec       	ldi	r24, 0xCF	; 207
 70a:	97 e0       	ldi	r25, 0x07	; 7
 70c:	01 97       	sbiw	r24, 0x01	; 1
 70e:	f1 f7       	brne	.-4      	; 0x70c <LCD_vSend_cmd+0x38>
 710:	00 c0       	rjmp	.+0      	; 0x712 <LCD_vSend_cmd+0x3e>
 712:	00 00       	nop
	#endif
	_delay_ms(1);
}
 714:	cf 91       	pop	r28
 716:	08 95       	ret

00000718 <LCD_vInit>:
 718:	8f ef       	ldi	r24, 0xFF	; 255
 71a:	91 ee       	ldi	r25, 0xE1	; 225
 71c:	a4 e0       	ldi	r26, 0x04	; 4
 71e:	81 50       	subi	r24, 0x01	; 1
 720:	90 40       	sbci	r25, 0x00	; 0
 722:	a0 40       	sbci	r26, 0x00	; 0
 724:	e1 f7       	brne	.-8      	; 0x71e <LCD_vInit+0x6>
 726:	00 c0       	rjmp	.+0      	; 0x728 <LCD_vInit+0x10>
 728:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('A',4,1);
 72a:	81 e4       	ldi	r24, 0x41	; 65
 72c:	64 e0       	ldi	r22, 0x04	; 4
 72e:	41 e0       	ldi	r20, 0x01	; 1
 730:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 734:	81 e4       	ldi	r24, 0x41	; 65
 736:	65 e0       	ldi	r22, 0x05	; 5
 738:	41 e0       	ldi	r20, 0x01	; 1
 73a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 73e:	81 e4       	ldi	r24, 0x41	; 65
 740:	66 e0       	ldi	r22, 0x06	; 6
 742:	41 e0       	ldi	r20, 0x01	; 1
 744:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 748:	81 e4       	ldi	r24, 0x41	; 65
 74a:	67 e0       	ldi	r22, 0x07	; 7
 74c:	41 e0       	ldi	r20, 0x01	; 1
 74e:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 752:	82 e4       	ldi	r24, 0x42	; 66
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	41 e0       	ldi	r20, 0x01	; 1
 758:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 75c:	82 e4       	ldi	r24, 0x42	; 66
 75e:	62 e0       	ldi	r22, 0x02	; 2
 760:	41 e0       	ldi	r20, 0x01	; 1
 762:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 766:	82 e4       	ldi	r24, 0x42	; 66
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	41 e0       	ldi	r20, 0x01	; 1
 76c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
   	DIO_write('B',RW,0);
 770:	82 e4       	ldi	r24, 0x42	; 66
 772:	62 e0       	ldi	r22, 0x02	; 2
 774:	40 e0       	ldi	r20, 0x00	; 0
 776:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
 77a:	82 e0       	ldi	r24, 0x02	; 2
 77c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_vSend_cmd>
 780:	af e1       	ldi	r26, 0x1F	; 31
 782:	be e4       	ldi	r27, 0x4E	; 78
 784:	11 97       	sbiw	r26, 0x01	; 1
 786:	f1 f7       	brne	.-4      	; 0x784 <LCD_vInit+0x6c>
 788:	00 c0       	rjmp	.+0      	; 0x78a <LCD_vInit+0x72>
 78a:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
 78c:	88 e2       	ldi	r24, 0x28	; 40
 78e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_vSend_cmd>
 792:	8f ec       	ldi	r24, 0xCF	; 207
 794:	97 e0       	ldi	r25, 0x07	; 7
 796:	01 97       	sbiw	r24, 0x01	; 1
 798:	f1 f7       	brne	.-4      	; 0x796 <LCD_vInit+0x7e>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <LCD_vInit+0x84>
 79c:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 79e:	8e e0       	ldi	r24, 0x0E	; 14
 7a0:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_vSend_cmd>
 7a4:	af ec       	ldi	r26, 0xCF	; 207
 7a6:	b7 e0       	ldi	r27, 0x07	; 7
 7a8:	11 97       	sbiw	r26, 0x01	; 1
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <LCD_vInit+0x90>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <LCD_vInit+0x96>
 7ae:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_vSend_cmd>
 7b6:	8f e1       	ldi	r24, 0x1F	; 31
 7b8:	9e e4       	ldi	r25, 0x4E	; 78
 7ba:	01 97       	sbiw	r24, 0x01	; 1
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <LCD_vInit+0xa2>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <LCD_vInit+0xa8>
 7c0:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 7c2:	86 e0       	ldi	r24, 0x06	; 6
 7c4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_vSend_cmd>
 7c8:	af ec       	ldi	r26, 0xCF	; 207
 7ca:	b7 e0       	ldi	r27, 0x07	; 7
 7cc:	11 97       	sbiw	r26, 0x01	; 1
 7ce:	f1 f7       	brne	.-4      	; 0x7cc <LCD_vInit+0xb4>
 7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <LCD_vInit+0xba>
 7d2:	00 00       	nop
	_delay_ms(1);
	#endif
}
 7d4:	08 95       	ret

000007d6 <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
 7d6:	cf 93       	push	r28
 7d8:	c8 2f       	mov	r28, r24
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',data>>4);
 7da:	68 2f       	mov	r22, r24
 7dc:	62 95       	swap	r22
 7de:	6f 70       	andi	r22, 0x0F	; 15
 7e0:	81 e4       	ldi	r24, 0x41	; 65
 7e2:	0e 94 2c 03 	call	0x658	; 0x658 <write_high_nibble>
	DIO_write('B',RS,1);
 7e6:	82 e4       	ldi	r24, 0x42	; 66
 7e8:	61 e0       	ldi	r22, 0x01	; 1
 7ea:	41 e0       	ldi	r20, 0x01	; 1
 7ec:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_write>
	send_falling_edge();
 7f0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <send_falling_edge>
	write_high_nibble('A',data);
 7f4:	81 e4       	ldi	r24, 0x41	; 65
 7f6:	6c 2f       	mov	r22, r28
 7f8:	0e 94 2c 03 	call	0x658	; 0x658 <write_high_nibble>
	DIO_write('B',RS,1);
 7fc:	82 e4       	ldi	r24, 0x42	; 66
 7fe:	61 e0       	ldi	r22, 0x01	; 1
 800:	41 e0       	ldi	r20, 0x01	; 1
 802:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_write>
	send_falling_edge();
 806:	0e 94 53 03 	call	0x6a6	; 0x6a6 <send_falling_edge>
 80a:	8f ec       	ldi	r24, 0xCF	; 207
 80c:	97 e0       	ldi	r25, 0x07	; 7
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <LCD_vSend_char+0x38>
 812:	00 c0       	rjmp	.+0      	; 0x814 <LCD_vSend_char+0x3e>
 814:	00 00       	nop
	#endif
	_delay_ms(1);
}
 816:	cf 91       	pop	r28
 818:	08 95       	ret

0000081a <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 820:	88 81       	ld	r24, Y
 822:	88 23       	and	r24, r24
 824:	31 f0       	breq	.+12     	; 0x832 <LCD_vSend_string+0x18>
	#endif
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
 826:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
 828:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCD_vSend_char>
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 82c:	89 91       	ld	r24, Y+
 82e:	88 23       	and	r24, r24
 830:	d9 f7       	brne	.-10     	; 0x828 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	08 95       	ret

00000838 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_vSend_cmd>
 83e:	8f e1       	ldi	r24, 0x1F	; 31
 840:	9e e4       	ldi	r25, 0x4E	; 78
 842:	01 97       	sbiw	r24, 0x01	; 1
 844:	f1 f7       	brne	.-4      	; 0x842 <LCD_clearscreen+0xa>
 846:	00 c0       	rjmp	.+0      	; 0x848 <LCD_clearscreen+0x10>
 848:	00 00       	nop
	_delay_ms(10);
}
 84a:	08 95       	ret

0000084c <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 84c:	28 2f       	mov	r18, r24
 84e:	21 50       	subi	r18, 0x01	; 1
 850:	22 30       	cpi	r18, 0x02	; 2
 852:	70 f4       	brcc	.+28     	; 0x870 <__stack+0x11>
 854:	61 31       	cpi	r22, 0x11	; 17
 856:	70 f4       	brcc	.+28     	; 0x874 <__stack+0x15>
 858:	66 23       	and	r22, r22
 85a:	71 f0       	breq	.+28     	; 0x878 <__stack+0x19>
	{
		data=0x80;
	}
	else if(row==1)
 85c:	81 30       	cpi	r24, 0x01	; 1
 85e:	19 f4       	brne	.+6      	; 0x866 <__stack+0x7>
	{
		data=0x80+coloumn-1 ;
 860:	96 2f       	mov	r25, r22
 862:	91 58       	subi	r25, 0x81	; 129
 864:	0a c0       	rjmp	.+20     	; 0x87a <__stack+0x1b>
	}
	else if (row==2)
 866:	82 30       	cpi	r24, 0x02	; 2
 868:	41 f4       	brne	.+16     	; 0x87a <__stack+0x1b>
	{
		data=0xc0+coloumn-1;
 86a:	96 2f       	mov	r25, r22
 86c:	91 54       	subi	r25, 0x41	; 65
 86e:	05 c0       	rjmp	.+10     	; 0x87a <__stack+0x1b>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 870:	90 e8       	ldi	r25, 0x80	; 128
 872:	03 c0       	rjmp	.+6      	; 0x87a <__stack+0x1b>
 874:	90 e8       	ldi	r25, 0x80	; 128
 876:	01 c0       	rjmp	.+2      	; 0x87a <__stack+0x1b>
 878:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 87a:	89 2f       	mov	r24, r25
 87c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_vSend_cmd>
 880:	8f ec       	ldi	r24, 0xCF	; 207
 882:	97 e0       	ldi	r25, 0x07	; 7
 884:	01 97       	sbiw	r24, 0x01	; 1
 886:	f1 f7       	brne	.-4      	; 0x884 <__stack+0x25>
 888:	00 c0       	rjmp	.+0      	; 0x88a <__stack+0x2b>
 88a:	00 00       	nop
	_delay_ms(1);
}
 88c:	08 95       	ret

0000088e <main>:
#include <util/delay.h>

int main(void)

{
	vintultra();
 88e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <vintultra>
	 DC_MOTOR_vInit();
 892:	0e 94 49 00 	call	0x92	; 0x92 <DC_MOTOR_vInit>
	  LCD_vInit();
 896:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vInit>
	
       if(dis >40)
       {
			LCD_clearscreen();
	       motor_move_forward();
		   LCD_vSend_string("forward");
 89a:	00 e6       	ldi	r16, 0x60	; 96
 89c:	10 e0       	ldi	r17, 0x00	; 0
			   _delay_ms(300);
		   }
		   else
		   {
			 LCD_clearscreen();
			 LCD_vSend_string("backward");
 89e:	0f 2e       	mov	r0, r31
 8a0:	f3 e7       	ldi	r31, 0x73	; 115
 8a2:	ef 2e       	mov	r14, r31
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	ff 2e       	mov	r15, r31
 8a8:	f0 2d       	mov	r31, r0
		   }
		   else if(dis_right<dis_left)
		   {
			   LCD_clearscreen();
			   
			   LCD_vSend_string("left");
 8aa:	0f 2e       	mov	r0, r31
 8ac:	fe e6       	ldi	r31, 0x6E	; 110
 8ae:	af 2e       	mov	r10, r31
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	bf 2e       	mov	r11, r31
 8b4:	f0 2d       	mov	r31, r0
		  
		   if(dis_right>dis_left)
		   {	
			   LCD_clearscreen();
			  
			  LCD_vSend_string("right");
 8b6:	0f 2e       	mov	r0, r31
 8b8:	f8 e6       	ldi	r31, 0x68	; 104
 8ba:	cf 2e       	mov	r12, r31
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	df 2e       	mov	r13, r31
 8c0:	f0 2d       	mov	r31, r0
	  char dis_right,dis_left;
	  short dis;
	
    while(1)
    {
		dis=ultraread();
 8c2:	0e 94 65 05 	call	0xaca	; 0xaca <ultraread>
 8c6:	28 2f       	mov	r18, r24
 8c8:	39 2f       	mov	r19, r25
	
       if(dis >40)
 8ca:	29 32       	cpi	r18, 0x29	; 41
 8cc:	31 05       	cpc	r19, r1
 8ce:	44 f0       	brlt	.+16     	; 0x8e0 <main+0x52>
       {
			LCD_clearscreen();
 8d0:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_clearscreen>
	       motor_move_forward();
 8d4:	0e 94 8a 00 	call	0x114	; 0x114 <motor_move_forward>
		   LCD_vSend_string("forward");
 8d8:	c8 01       	movw	r24, r16
 8da:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_vSend_string>
 8de:	f1 cf       	rjmp	.-30     	; 0x8c2 <main+0x34>
       }
	   else if (dis<40)
 8e0:	28 32       	cpi	r18, 0x28	; 40
 8e2:	31 05       	cpc	r19, r1
 8e4:	74 f7       	brge	.-36     	; 0x8c2 <main+0x34>
	   {
		  
		   motor_stop();
 8e6:	0e 94 93 00 	call	0x126	; 0x126 <motor_stop>
		   
		   Servo_angle(0);
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	0e 94 df 04 	call	0x9be	; 0x9be <Servo_angle>
 8f0:	8f ef       	ldi	r24, 0xFF	; 255
 8f2:	99 e6       	ldi	r25, 0x69	; 105
 8f4:	a8 e1       	ldi	r26, 0x18	; 24
 8f6:	81 50       	subi	r24, 0x01	; 1
 8f8:	90 40       	sbci	r25, 0x00	; 0
 8fa:	a0 40       	sbci	r26, 0x00	; 0
 8fc:	e1 f7       	brne	.-8      	; 0x8f6 <main+0x68>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <main+0x72>
 900:	00 00       	nop
		   _delay_ms(1000);
		   dis_right=ultraread();
 902:	0e 94 65 05 	call	0xaca	; 0xaca <ultraread>
 906:	c8 2f       	mov	r28, r24
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	92 e5       	ldi	r25, 0x52	; 82
 90c:	a7 e0       	ldi	r26, 0x07	; 7
 90e:	81 50       	subi	r24, 0x01	; 1
 910:	90 40       	sbci	r25, 0x00	; 0
 912:	a0 40       	sbci	r26, 0x00	; 0
 914:	e1 f7       	brne	.-8      	; 0x90e <main+0x80>
 916:	00 c0       	rjmp	.+0      	; 0x918 <main+0x8a>
 918:	00 00       	nop
		   _delay_ms(300);
		   Servo_angle(180);
 91a:	84 eb       	ldi	r24, 0xB4	; 180
 91c:	0e 94 df 04 	call	0x9be	; 0x9be <Servo_angle>
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	99 e6       	ldi	r25, 0x69	; 105
 924:	a8 e1       	ldi	r26, 0x18	; 24
 926:	81 50       	subi	r24, 0x01	; 1
 928:	90 40       	sbci	r25, 0x00	; 0
 92a:	a0 40       	sbci	r26, 0x00	; 0
 92c:	e1 f7       	brne	.-8      	; 0x926 <main+0x98>
 92e:	00 c0       	rjmp	.+0      	; 0x930 <main+0xa2>
 930:	00 00       	nop
		   _delay_ms(1000);
		   dis_left=ultraread();
 932:	0e 94 65 05 	call	0xaca	; 0xaca <ultraread>
 936:	d8 2f       	mov	r29, r24
 938:	8f ef       	ldi	r24, 0xFF	; 255
 93a:	92 e5       	ldi	r25, 0x52	; 82
 93c:	a7 e0       	ldi	r26, 0x07	; 7
 93e:	81 50       	subi	r24, 0x01	; 1
 940:	90 40       	sbci	r25, 0x00	; 0
 942:	a0 40       	sbci	r26, 0x00	; 0
 944:	e1 f7       	brne	.-8      	; 0x93e <main+0xb0>
 946:	00 c0       	rjmp	.+0      	; 0x948 <main+0xba>
 948:	00 00       	nop
		   _delay_ms(300);
		   Servo_angle(90); 
 94a:	8a e5       	ldi	r24, 0x5A	; 90
 94c:	0e 94 df 04 	call	0x9be	; 0x9be <Servo_angle>
		  
		   if(dis_right>dis_left)
 950:	dc 17       	cp	r29, r28
 952:	88 f4       	brcc	.+34     	; 0x976 <main+0xe8>
		   {	
			   LCD_clearscreen();
 954:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_clearscreen>
			  
			  LCD_vSend_string("right");
 958:	c6 01       	movw	r24, r12
 95a:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_vSend_string>
			  motor_move_right();
 95e:	0e 94 9f 00 	call	0x13e	; 0x13e <motor_move_right>
 962:	8f ef       	ldi	r24, 0xFF	; 255
 964:	92 e5       	ldi	r25, 0x52	; 82
 966:	a7 e0       	ldi	r26, 0x07	; 7
 968:	81 50       	subi	r24, 0x01	; 1
 96a:	90 40       	sbci	r25, 0x00	; 0
 96c:	a0 40       	sbci	r26, 0x00	; 0
 96e:	e1 f7       	brne	.-8      	; 0x968 <main+0xda>
 970:	00 c0       	rjmp	.+0      	; 0x972 <main+0xe4>
 972:	00 00       	nop
 974:	a6 cf       	rjmp	.-180    	; 0x8c2 <main+0x34>
			  _delay_ms(300);
		   }
		   else if(dis_right<dis_left)
 976:	cd 17       	cp	r28, r29
 978:	88 f4       	brcc	.+34     	; 0x99c <main+0x10e>
		   {
			   LCD_clearscreen();
 97a:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_clearscreen>
			   
			   LCD_vSend_string("left");
 97e:	c5 01       	movw	r24, r10
 980:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_vSend_string>
			   motor_move_left();
 984:	0e 94 9c 00 	call	0x138	; 0x138 <motor_move_left>
 988:	8f ef       	ldi	r24, 0xFF	; 255
 98a:	92 e5       	ldi	r25, 0x52	; 82
 98c:	a7 e0       	ldi	r26, 0x07	; 7
 98e:	81 50       	subi	r24, 0x01	; 1
 990:	90 40       	sbci	r25, 0x00	; 0
 992:	a0 40       	sbci	r26, 0x00	; 0
 994:	e1 f7       	brne	.-8      	; 0x98e <main+0x100>
 996:	00 c0       	rjmp	.+0      	; 0x998 <main+0x10a>
 998:	00 00       	nop
 99a:	93 cf       	rjmp	.-218    	; 0x8c2 <main+0x34>
			   _delay_ms(300);
		   }
		   else
		   {
			 LCD_clearscreen();
 99c:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_clearscreen>
			 LCD_vSend_string("backward");
 9a0:	c7 01       	movw	r24, r14
 9a2:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_vSend_string>
			 motor_move_backward();
 9a6:	0e 94 a2 00 	call	0x144	; 0x144 <motor_move_backward>
 9aa:	8f ef       	ldi	r24, 0xFF	; 255
 9ac:	92 e5       	ldi	r25, 0x52	; 82
 9ae:	a7 e0       	ldi	r26, 0x07	; 7
 9b0:	81 50       	subi	r24, 0x01	; 1
 9b2:	90 40       	sbci	r25, 0x00	; 0
 9b4:	a0 40       	sbci	r26, 0x00	; 0
 9b6:	e1 f7       	brne	.-8      	; 0x9b0 <main+0x122>
 9b8:	00 c0       	rjmp	.+0      	; 0x9ba <main+0x12c>
 9ba:	00 00       	nop
 9bc:	82 cf       	rjmp	.-252    	; 0x8c2 <main+0x34>

000009be <Servo_angle>:


	void Servo_angle(char angle)
	{
		
		if(angle==0)
 9be:	88 23       	and	r24, r24
 9c0:	39 f4       	brne	.+14     	; 0x9d0 <Servo_angle+0x12>
		{
		timer1_wave_fastPWM(1);
 9c2:	60 e0       	ldi	r22, 0x00	; 0
 9c4:	70 e0       	ldi	r23, 0x00	; 0
 9c6:	80 e8       	ldi	r24, 0x80	; 128
 9c8:	9f e3       	ldi	r25, 0x3F	; 63
 9ca:	0e 94 20 05 	call	0xa40	; 0xa40 <timer1_wave_fastPWM>
 9ce:	08 95       	ret
		}
		else if(angle==180)
 9d0:	84 3b       	cpi	r24, 0xB4	; 180
 9d2:	39 f4       	brne	.+14     	; 0x9e2 <Servo_angle+0x24>
		{
		timer1_wave_fastPWM(2);
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	80 e0       	ldi	r24, 0x00	; 0
 9da:	90 e4       	ldi	r25, 0x40	; 64
 9dc:	0e 94 20 05 	call	0xa40	; 0xa40 <timer1_wave_fastPWM>
 9e0:	08 95       	ret
		}
		else if(angle==90)
 9e2:	8a 35       	cpi	r24, 0x5A	; 90
 9e4:	39 f4       	brne	.+14     	; 0x9f4 <Servo_angle+0x36>
		{
			timer1_wave_fastPWM(1.5);
 9e6:	60 e0       	ldi	r22, 0x00	; 0
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	80 ec       	ldi	r24, 0xC0	; 192
 9ec:	9f e3       	ldi	r25, 0x3F	; 63
 9ee:	0e 94 20 05 	call	0xa40	; 0xa40 <timer1_wave_fastPWM>
 9f2:	08 95       	ret
		}
		else
		{
			timer1_wave_fastPWM(0);
 9f4:	60 e0       	ldi	r22, 0x00	; 0
 9f6:	70 e0       	ldi	r23, 0x00	; 0
 9f8:	cb 01       	movw	r24, r22
 9fa:	0e 94 20 05 	call	0xa40	; 0xa40 <timer1_wave_fastPWM>
 9fe:	08 95       	ret

00000a00 <timer_CTC_init_interrupt>:
#include <avr/io.h>
#include <avr/interrupt.h>
void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
 a00:	83 b7       	in	r24, 0x33	; 51
 a02:	88 60       	ori	r24, 0x08	; 8
 a04:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=80;
 a06:	80 e5       	ldi	r24, 0x50	; 80
 a08:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
 a0a:	83 b7       	in	r24, 0x33	; 51
 a0c:	81 60       	ori	r24, 0x01	; 1
 a0e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 a10:	83 b7       	in	r24, 0x33	; 51
 a12:	84 60       	ori	r24, 0x04	; 4
 a14:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
 a16:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 a18:	89 b7       	in	r24, 0x39	; 57
 a1a:	82 60       	ori	r24, 0x02	; 2
 a1c:	89 bf       	out	0x39, r24	; 57
}
 a1e:	08 95       	ret

00000a20 <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 a20:	bb 9a       	sbi	0x17, 3	; 23
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
 a22:	83 b7       	in	r24, 0x33	; 51
 a24:	88 60       	ori	r24, 0x08	; 8
 a26:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
 a28:	80 e4       	ldi	r24, 0x40	; 64
 a2a:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 a2c:	83 b7       	in	r24, 0x33	; 51
 a2e:	81 60       	ori	r24, 0x01	; 1
 a30:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 a32:	83 b7       	in	r24, 0x33	; 51
 a34:	84 60       	ori	r24, 0x04	; 4
 a36:	83 bf       	out	0x33, r24	; 51
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
 a38:	83 b7       	in	r24, 0x33	; 51
 a3a:	80 61       	ori	r24, 0x10	; 16
 a3c:	83 bf       	out	0x33, r24	; 51
}
 a3e:	08 95       	ret

00000a40 <timer1_wave_fastPWM>:

void timer1_wave_fastPWM(double value)
{
	/* set OC1A as output pin */
	SET_BIT(DDRD,5);
 a40:	8d 9a       	sbi	0x11, 5	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 a42:	2f b5       	in	r18, 0x2f	; 47
 a44:	22 60       	ori	r18, 0x02	; 2
 a46:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 a48:	2e b5       	in	r18, 0x2e	; 46
 a4a:	28 60       	ori	r18, 0x08	; 8
 a4c:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 a4e:	2e b5       	in	r18, 0x2e	; 46
 a50:	20 61       	ori	r18, 0x10	; 16
 a52:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	OCR1A=value*1000;
 a54:	20 e0       	ldi	r18, 0x00	; 0
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	4a e7       	ldi	r20, 0x7A	; 122
 a5a:	54 e4       	ldi	r21, 0x44	; 68
 a5c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__mulsf3>
 a60:	0e 94 b8 05 	call	0xb70	; 0xb70 <__fixunssfsi>
 a64:	dc 01       	movw	r26, r24
 a66:	cb 01       	movw	r24, r22
 a68:	9b bd       	out	0x2b, r25	; 43
 a6a:	8a bd       	out	0x2a, r24	; 42
	ICR1=19999;
 a6c:	8f e1       	ldi	r24, 0x1F	; 31
 a6e:	9e e4       	ldi	r25, 0x4E	; 78
 a70:	97 bd       	out	0x27, r25	; 39
 a72:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS10);
 a74:	8e b5       	in	r24, 0x2e	; 46
 a76:	81 60       	ori	r24, 0x01	; 1
 a78:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1A1);
 a7a:	8f b5       	in	r24, 0x2f	; 47
 a7c:	80 68       	ori	r24, 0x80	; 128
 a7e:	8f bd       	out	0x2f, r24	; 47
}
 a80:	08 95       	ret

00000a82 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 a82:	bb 9a       	sbi	0x17, 3	; 23
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
 a84:	83 b7       	in	r24, 0x33	; 51
 a86:	80 64       	ori	r24, 0x40	; 64
 a88:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
 a8a:	80 e4       	ldi	r24, 0x40	; 64
 a8c:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 a8e:	83 b7       	in	r24, 0x33	; 51
 a90:	81 60       	ori	r24, 0x01	; 1
 a92:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 a94:	83 b7       	in	r24, 0x33	; 51
 a96:	84 60       	ori	r24, 0x04	; 4
 a98:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
 a9a:	83 b7       	in	r24, 0x33	; 51
 a9c:	80 61       	ori	r24, 0x10	; 16
 a9e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
 aa0:	83 b7       	in	r24, 0x33	; 51
 aa2:	80 62       	ori	r24, 0x20	; 32
 aa4:	83 bf       	out	0x33, r24	; 51
}
 aa6:	08 95       	ret

00000aa8 <vintultra>:
	
	
	unsigned short a,b,high,distance;
	void vintultra(void)
	{
		DIO_vsetPINDir('D',7,1);//init ultra
 aa8:	84 e4       	ldi	r24, 0x44	; 68
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	67 e0       	ldi	r22, 0x07	; 7
 aae:	70 e0       	ldi	r23, 0x00	; 0
 ab0:	41 e0       	ldi	r20, 0x01	; 1
 ab2:	50 e0       	ldi	r21, 0x00	; 0
 ab4:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
		DIO_vsetPINDir('D',6,0);
 ab8:	84 e4       	ldi	r24, 0x44	; 68
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	66 e0       	ldi	r22, 0x06	; 6
 abe:	70 e0       	ldi	r23, 0x00	; 0
 ac0:	40 e0       	ldi	r20, 0x00	; 0
 ac2:	50 e0       	ldi	r21, 0x00	; 0
 ac4:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vsetPINDir>
	}
 ac8:	08 95       	ret

00000aca <ultraread>:
	
	unsigned short ultraread(void)
    
    {	
		TCCR1A = 0;
 aca:	1f bc       	out	0x2f, r1	; 47
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
 acc:	80 e2       	ldi	r24, 0x20	; 32
 ace:	88 bf       	out	0x38, r24	; 56
		DIO_write('D',7,1);
 ad0:	84 e4       	ldi	r24, 0x44	; 68
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	67 e0       	ldi	r22, 0x07	; 7
 ad6:	70 e0       	ldi	r23, 0x00	; 0
 ad8:	41 e0       	ldi	r20, 0x01	; 1
 ada:	50 e0       	ldi	r21, 0x00	; 0
 adc:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ae0:	85 e8       	ldi	r24, 0x85	; 133
 ae2:	8a 95       	dec	r24
 ae4:	f1 f7       	brne	.-4      	; 0xae2 <ultraread+0x18>
 ae6:	00 00       	nop
		_delay_us(50);
		DIO_write('D',7,0);
 ae8:	84 e4       	ldi	r24, 0x44	; 68
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	67 e0       	ldi	r22, 0x07	; 7
 aee:	70 e0       	ldi	r23, 0x00	; 0
 af0:	40 e0       	ldi	r20, 0x00	; 0
 af2:	50 e0       	ldi	r21, 0x00	; 0
 af4:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_write>
	
	    TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler*/
 af8:	81 ec       	ldi	r24, 0xC1	; 193
 afa:	8e bd       	out	0x2e, r24	; 46
	    while ((TIFR&(1<<ICF1)) == 0);
 afc:	08 b6       	in	r0, 0x38	; 56
 afe:	05 fe       	sbrs	r0, 5
 b00:	fd cf       	rjmp	.-6      	; 0xafc <ultraread+0x32>
	    a = ICR1;  		/* Take value of capture register */
 b02:	86 b5       	in	r24, 0x26	; 38
 b04:	97 b5       	in	r25, 0x27	; 39
 b06:	90 93 83 00 	sts	0x0083, r25
 b0a:	80 93 82 00 	sts	0x0082, r24
	    TIFR = (1<<ICF1);  	/* Clear ICF flag */
 b0e:	80 e2       	ldi	r24, 0x20	; 32
 b10:	88 bf       	out	0x38, r24	; 56
	    TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler*/
 b12:	81 e8       	ldi	r24, 0x81	; 129
 b14:	8e bd       	out	0x2e, r24	; 46
	    while ((TIFR&(1<<ICF1)) == 0);
 b16:	08 b6       	in	r0, 0x38	; 56
 b18:	05 fe       	sbrs	r0, 5
 b1a:	fd cf       	rjmp	.-6      	; 0xb16 <ultraread+0x4c>
	    b = ICR1;  		/* Take value of capture register */
 b1c:	66 b5       	in	r22, 0x26	; 38
 b1e:	77 b5       	in	r23, 0x27	; 39
 b20:	70 93 7d 00 	sts	0x007D, r23
 b24:	60 93 7c 00 	sts	0x007C, r22
	    TIFR = (1<<ICF1);  	/* Clear ICF flag */
 b28:	80 e2       	ldi	r24, 0x20	; 32
 b2a:	88 bf       	out	0x38, r24	; 56
		TCNT1=0;
 b2c:	1d bc       	out	0x2d, r1	; 45
 b2e:	1c bc       	out	0x2c, r1	; 44
	    TCCR1B = 0;  		/* Stop the timer */
 b30:	1e bc       	out	0x2e, r1	; 46
		high=b-a;
 b32:	80 91 82 00 	lds	r24, 0x0082
 b36:	90 91 83 00 	lds	r25, 0x0083
 b3a:	68 1b       	sub	r22, r24
 b3c:	79 0b       	sbc	r23, r25
 b3e:	70 93 81 00 	sts	0x0081, r23
 b42:	60 93 80 00 	sts	0x0080, r22
		distance=((high*34600)/(F_CPU*2)) ;
 b46:	80 e0       	ldi	r24, 0x00	; 0
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	28 e2       	ldi	r18, 0x28	; 40
 b4c:	37 e8       	ldi	r19, 0x87	; 135
 b4e:	40 e0       	ldi	r20, 0x00	; 0
 b50:	50 e0       	ldi	r21, 0x00	; 0
 b52:	0e 94 98 06 	call	0xd30	; 0xd30 <__mulsi3>
 b56:	20 e0       	ldi	r18, 0x00	; 0
 b58:	34 e2       	ldi	r19, 0x24	; 36
 b5a:	44 ef       	ldi	r20, 0xF4	; 244
 b5c:	50 e0       	ldi	r21, 0x00	; 0
 b5e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__udivmodsi4>
 b62:	20 93 7e 00 	sts	0x007E, r18
 b66:	30 93 7f 00 	sts	0x007F, r19
		return distance;
	}		
 b6a:	82 2f       	mov	r24, r18
 b6c:	93 2f       	mov	r25, r19
 b6e:	08 95       	ret

00000b70 <__fixunssfsi>:
 b70:	33 d0       	rcall	.+102    	; 0xbd8 <__fp_splitA>
 b72:	88 f0       	brcs	.+34     	; 0xb96 <__fixunssfsi+0x26>
 b74:	9f 57       	subi	r25, 0x7F	; 127
 b76:	90 f0       	brcs	.+36     	; 0xb9c <__fixunssfsi+0x2c>
 b78:	b9 2f       	mov	r27, r25
 b7a:	99 27       	eor	r25, r25
 b7c:	b7 51       	subi	r27, 0x17	; 23
 b7e:	a0 f0       	brcs	.+40     	; 0xba8 <__fixunssfsi+0x38>
 b80:	d1 f0       	breq	.+52     	; 0xbb6 <__fixunssfsi+0x46>
 b82:	66 0f       	add	r22, r22
 b84:	77 1f       	adc	r23, r23
 b86:	88 1f       	adc	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	1a f0       	brmi	.+6      	; 0xb92 <__fixunssfsi+0x22>
 b8c:	ba 95       	dec	r27
 b8e:	c9 f7       	brne	.-14     	; 0xb82 <__fixunssfsi+0x12>
 b90:	12 c0       	rjmp	.+36     	; 0xbb6 <__fixunssfsi+0x46>
 b92:	b1 30       	cpi	r27, 0x01	; 1
 b94:	81 f0       	breq	.+32     	; 0xbb6 <__fixunssfsi+0x46>
 b96:	3a d0       	rcall	.+116    	; 0xc0c <__fp_zero>
 b98:	b1 e0       	ldi	r27, 0x01	; 1
 b9a:	08 95       	ret
 b9c:	37 c0       	rjmp	.+110    	; 0xc0c <__fp_zero>
 b9e:	67 2f       	mov	r22, r23
 ba0:	78 2f       	mov	r23, r24
 ba2:	88 27       	eor	r24, r24
 ba4:	b8 5f       	subi	r27, 0xF8	; 248
 ba6:	39 f0       	breq	.+14     	; 0xbb6 <__fixunssfsi+0x46>
 ba8:	b9 3f       	cpi	r27, 0xF9	; 249
 baa:	cc f3       	brlt	.-14     	; 0xb9e <__fixunssfsi+0x2e>
 bac:	86 95       	lsr	r24
 bae:	77 95       	ror	r23
 bb0:	67 95       	ror	r22
 bb2:	b3 95       	inc	r27
 bb4:	d9 f7       	brne	.-10     	; 0xbac <__fixunssfsi+0x3c>
 bb6:	3e f4       	brtc	.+14     	; 0xbc6 <__fixunssfsi+0x56>
 bb8:	90 95       	com	r25
 bba:	80 95       	com	r24
 bbc:	70 95       	com	r23
 bbe:	61 95       	neg	r22
 bc0:	7f 4f       	sbci	r23, 0xFF	; 255
 bc2:	8f 4f       	sbci	r24, 0xFF	; 255
 bc4:	9f 4f       	sbci	r25, 0xFF	; 255
 bc6:	08 95       	ret

00000bc8 <__fp_split3>:
 bc8:	57 fd       	sbrc	r21, 7
 bca:	90 58       	subi	r25, 0x80	; 128
 bcc:	44 0f       	add	r20, r20
 bce:	55 1f       	adc	r21, r21
 bd0:	59 f0       	breq	.+22     	; 0xbe8 <__fp_splitA+0x10>
 bd2:	5f 3f       	cpi	r21, 0xFF	; 255
 bd4:	71 f0       	breq	.+28     	; 0xbf2 <__fp_splitA+0x1a>
 bd6:	47 95       	ror	r20

00000bd8 <__fp_splitA>:
 bd8:	88 0f       	add	r24, r24
 bda:	97 fb       	bst	r25, 7
 bdc:	99 1f       	adc	r25, r25
 bde:	61 f0       	breq	.+24     	; 0xbf8 <__fp_splitA+0x20>
 be0:	9f 3f       	cpi	r25, 0xFF	; 255
 be2:	79 f0       	breq	.+30     	; 0xc02 <__fp_splitA+0x2a>
 be4:	87 95       	ror	r24
 be6:	08 95       	ret
 be8:	12 16       	cp	r1, r18
 bea:	13 06       	cpc	r1, r19
 bec:	14 06       	cpc	r1, r20
 bee:	55 1f       	adc	r21, r21
 bf0:	f2 cf       	rjmp	.-28     	; 0xbd6 <__fp_split3+0xe>
 bf2:	46 95       	lsr	r20
 bf4:	f1 df       	rcall	.-30     	; 0xbd8 <__fp_splitA>
 bf6:	08 c0       	rjmp	.+16     	; 0xc08 <__fp_splitA+0x30>
 bf8:	16 16       	cp	r1, r22
 bfa:	17 06       	cpc	r1, r23
 bfc:	18 06       	cpc	r1, r24
 bfe:	99 1f       	adc	r25, r25
 c00:	f1 cf       	rjmp	.-30     	; 0xbe4 <__fp_splitA+0xc>
 c02:	86 95       	lsr	r24
 c04:	71 05       	cpc	r23, r1
 c06:	61 05       	cpc	r22, r1
 c08:	08 94       	sec
 c0a:	08 95       	ret

00000c0c <__fp_zero>:
 c0c:	e8 94       	clt

00000c0e <__fp_szero>:
 c0e:	bb 27       	eor	r27, r27
 c10:	66 27       	eor	r22, r22
 c12:	77 27       	eor	r23, r23
 c14:	cb 01       	movw	r24, r22
 c16:	97 f9       	bld	r25, 7
 c18:	08 95       	ret

00000c1a <__mulsf3>:
 c1a:	0b d0       	rcall	.+22     	; 0xc32 <__mulsf3x>
 c1c:	78 c0       	rjmp	.+240    	; 0xd0e <__fp_round>
 c1e:	69 d0       	rcall	.+210    	; 0xcf2 <__fp_pscA>
 c20:	28 f0       	brcs	.+10     	; 0xc2c <__mulsf3+0x12>
 c22:	6e d0       	rcall	.+220    	; 0xd00 <__fp_pscB>
 c24:	18 f0       	brcs	.+6      	; 0xc2c <__mulsf3+0x12>
 c26:	95 23       	and	r25, r21
 c28:	09 f0       	breq	.+2      	; 0xc2c <__mulsf3+0x12>
 c2a:	5a c0       	rjmp	.+180    	; 0xce0 <__fp_inf>
 c2c:	5f c0       	rjmp	.+190    	; 0xcec <__fp_nan>
 c2e:	11 24       	eor	r1, r1
 c30:	ee cf       	rjmp	.-36     	; 0xc0e <__fp_szero>

00000c32 <__mulsf3x>:
 c32:	ca df       	rcall	.-108    	; 0xbc8 <__fp_split3>
 c34:	a0 f3       	brcs	.-24     	; 0xc1e <__mulsf3+0x4>

00000c36 <__mulsf3_pse>:
 c36:	95 9f       	mul	r25, r21
 c38:	d1 f3       	breq	.-12     	; 0xc2e <__mulsf3+0x14>
 c3a:	95 0f       	add	r25, r21
 c3c:	50 e0       	ldi	r21, 0x00	; 0
 c3e:	55 1f       	adc	r21, r21
 c40:	62 9f       	mul	r22, r18
 c42:	f0 01       	movw	r30, r0
 c44:	72 9f       	mul	r23, r18
 c46:	bb 27       	eor	r27, r27
 c48:	f0 0d       	add	r31, r0
 c4a:	b1 1d       	adc	r27, r1
 c4c:	63 9f       	mul	r22, r19
 c4e:	aa 27       	eor	r26, r26
 c50:	f0 0d       	add	r31, r0
 c52:	b1 1d       	adc	r27, r1
 c54:	aa 1f       	adc	r26, r26
 c56:	64 9f       	mul	r22, r20
 c58:	66 27       	eor	r22, r22
 c5a:	b0 0d       	add	r27, r0
 c5c:	a1 1d       	adc	r26, r1
 c5e:	66 1f       	adc	r22, r22
 c60:	82 9f       	mul	r24, r18
 c62:	22 27       	eor	r18, r18
 c64:	b0 0d       	add	r27, r0
 c66:	a1 1d       	adc	r26, r1
 c68:	62 1f       	adc	r22, r18
 c6a:	73 9f       	mul	r23, r19
 c6c:	b0 0d       	add	r27, r0
 c6e:	a1 1d       	adc	r26, r1
 c70:	62 1f       	adc	r22, r18
 c72:	83 9f       	mul	r24, r19
 c74:	a0 0d       	add	r26, r0
 c76:	61 1d       	adc	r22, r1
 c78:	22 1f       	adc	r18, r18
 c7a:	74 9f       	mul	r23, r20
 c7c:	33 27       	eor	r19, r19
 c7e:	a0 0d       	add	r26, r0
 c80:	61 1d       	adc	r22, r1
 c82:	23 1f       	adc	r18, r19
 c84:	84 9f       	mul	r24, r20
 c86:	60 0d       	add	r22, r0
 c88:	21 1d       	adc	r18, r1
 c8a:	82 2f       	mov	r24, r18
 c8c:	76 2f       	mov	r23, r22
 c8e:	6a 2f       	mov	r22, r26
 c90:	11 24       	eor	r1, r1
 c92:	9f 57       	subi	r25, 0x7F	; 127
 c94:	50 40       	sbci	r21, 0x00	; 0
 c96:	8a f0       	brmi	.+34     	; 0xcba <__mulsf3_pse+0x84>
 c98:	e1 f0       	breq	.+56     	; 0xcd2 <__mulsf3_pse+0x9c>
 c9a:	88 23       	and	r24, r24
 c9c:	4a f0       	brmi	.+18     	; 0xcb0 <__mulsf3_pse+0x7a>
 c9e:	ee 0f       	add	r30, r30
 ca0:	ff 1f       	adc	r31, r31
 ca2:	bb 1f       	adc	r27, r27
 ca4:	66 1f       	adc	r22, r22
 ca6:	77 1f       	adc	r23, r23
 ca8:	88 1f       	adc	r24, r24
 caa:	91 50       	subi	r25, 0x01	; 1
 cac:	50 40       	sbci	r21, 0x00	; 0
 cae:	a9 f7       	brne	.-22     	; 0xc9a <__mulsf3_pse+0x64>
 cb0:	9e 3f       	cpi	r25, 0xFE	; 254
 cb2:	51 05       	cpc	r21, r1
 cb4:	70 f0       	brcs	.+28     	; 0xcd2 <__mulsf3_pse+0x9c>
 cb6:	14 c0       	rjmp	.+40     	; 0xce0 <__fp_inf>
 cb8:	aa cf       	rjmp	.-172    	; 0xc0e <__fp_szero>
 cba:	5f 3f       	cpi	r21, 0xFF	; 255
 cbc:	ec f3       	brlt	.-6      	; 0xcb8 <__mulsf3_pse+0x82>
 cbe:	98 3e       	cpi	r25, 0xE8	; 232
 cc0:	dc f3       	brlt	.-10     	; 0xcb8 <__mulsf3_pse+0x82>
 cc2:	86 95       	lsr	r24
 cc4:	77 95       	ror	r23
 cc6:	67 95       	ror	r22
 cc8:	b7 95       	ror	r27
 cca:	f7 95       	ror	r31
 ccc:	e7 95       	ror	r30
 cce:	9f 5f       	subi	r25, 0xFF	; 255
 cd0:	c1 f7       	brne	.-16     	; 0xcc2 <__mulsf3_pse+0x8c>
 cd2:	fe 2b       	or	r31, r30
 cd4:	88 0f       	add	r24, r24
 cd6:	91 1d       	adc	r25, r1
 cd8:	96 95       	lsr	r25
 cda:	87 95       	ror	r24
 cdc:	97 f9       	bld	r25, 7
 cde:	08 95       	ret

00000ce0 <__fp_inf>:
 ce0:	97 f9       	bld	r25, 7
 ce2:	9f 67       	ori	r25, 0x7F	; 127
 ce4:	80 e8       	ldi	r24, 0x80	; 128
 ce6:	70 e0       	ldi	r23, 0x00	; 0
 ce8:	60 e0       	ldi	r22, 0x00	; 0
 cea:	08 95       	ret

00000cec <__fp_nan>:
 cec:	9f ef       	ldi	r25, 0xFF	; 255
 cee:	80 ec       	ldi	r24, 0xC0	; 192
 cf0:	08 95       	ret

00000cf2 <__fp_pscA>:
 cf2:	00 24       	eor	r0, r0
 cf4:	0a 94       	dec	r0
 cf6:	16 16       	cp	r1, r22
 cf8:	17 06       	cpc	r1, r23
 cfa:	18 06       	cpc	r1, r24
 cfc:	09 06       	cpc	r0, r25
 cfe:	08 95       	ret

00000d00 <__fp_pscB>:
 d00:	00 24       	eor	r0, r0
 d02:	0a 94       	dec	r0
 d04:	12 16       	cp	r1, r18
 d06:	13 06       	cpc	r1, r19
 d08:	14 06       	cpc	r1, r20
 d0a:	05 06       	cpc	r0, r21
 d0c:	08 95       	ret

00000d0e <__fp_round>:
 d0e:	09 2e       	mov	r0, r25
 d10:	03 94       	inc	r0
 d12:	00 0c       	add	r0, r0
 d14:	11 f4       	brne	.+4      	; 0xd1a <__fp_round+0xc>
 d16:	88 23       	and	r24, r24
 d18:	52 f0       	brmi	.+20     	; 0xd2e <__fp_round+0x20>
 d1a:	bb 0f       	add	r27, r27
 d1c:	40 f4       	brcc	.+16     	; 0xd2e <__fp_round+0x20>
 d1e:	bf 2b       	or	r27, r31
 d20:	11 f4       	brne	.+4      	; 0xd26 <__fp_round+0x18>
 d22:	60 ff       	sbrs	r22, 0
 d24:	04 c0       	rjmp	.+8      	; 0xd2e <__fp_round+0x20>
 d26:	6f 5f       	subi	r22, 0xFF	; 255
 d28:	7f 4f       	sbci	r23, 0xFF	; 255
 d2a:	8f 4f       	sbci	r24, 0xFF	; 255
 d2c:	9f 4f       	sbci	r25, 0xFF	; 255
 d2e:	08 95       	ret

00000d30 <__mulsi3>:
 d30:	62 9f       	mul	r22, r18
 d32:	d0 01       	movw	r26, r0
 d34:	73 9f       	mul	r23, r19
 d36:	f0 01       	movw	r30, r0
 d38:	82 9f       	mul	r24, r18
 d3a:	e0 0d       	add	r30, r0
 d3c:	f1 1d       	adc	r31, r1
 d3e:	64 9f       	mul	r22, r20
 d40:	e0 0d       	add	r30, r0
 d42:	f1 1d       	adc	r31, r1
 d44:	92 9f       	mul	r25, r18
 d46:	f0 0d       	add	r31, r0
 d48:	83 9f       	mul	r24, r19
 d4a:	f0 0d       	add	r31, r0
 d4c:	74 9f       	mul	r23, r20
 d4e:	f0 0d       	add	r31, r0
 d50:	65 9f       	mul	r22, r21
 d52:	f0 0d       	add	r31, r0
 d54:	99 27       	eor	r25, r25
 d56:	72 9f       	mul	r23, r18
 d58:	b0 0d       	add	r27, r0
 d5a:	e1 1d       	adc	r30, r1
 d5c:	f9 1f       	adc	r31, r25
 d5e:	63 9f       	mul	r22, r19
 d60:	b0 0d       	add	r27, r0
 d62:	e1 1d       	adc	r30, r1
 d64:	f9 1f       	adc	r31, r25
 d66:	bd 01       	movw	r22, r26
 d68:	cf 01       	movw	r24, r30
 d6a:	11 24       	eor	r1, r1
 d6c:	08 95       	ret

00000d6e <__udivmodsi4>:
 d6e:	a1 e2       	ldi	r26, 0x21	; 33
 d70:	1a 2e       	mov	r1, r26
 d72:	aa 1b       	sub	r26, r26
 d74:	bb 1b       	sub	r27, r27
 d76:	fd 01       	movw	r30, r26
 d78:	0d c0       	rjmp	.+26     	; 0xd94 <__udivmodsi4_ep>

00000d7a <__udivmodsi4_loop>:
 d7a:	aa 1f       	adc	r26, r26
 d7c:	bb 1f       	adc	r27, r27
 d7e:	ee 1f       	adc	r30, r30
 d80:	ff 1f       	adc	r31, r31
 d82:	a2 17       	cp	r26, r18
 d84:	b3 07       	cpc	r27, r19
 d86:	e4 07       	cpc	r30, r20
 d88:	f5 07       	cpc	r31, r21
 d8a:	20 f0       	brcs	.+8      	; 0xd94 <__udivmodsi4_ep>
 d8c:	a2 1b       	sub	r26, r18
 d8e:	b3 0b       	sbc	r27, r19
 d90:	e4 0b       	sbc	r30, r20
 d92:	f5 0b       	sbc	r31, r21

00000d94 <__udivmodsi4_ep>:
 d94:	66 1f       	adc	r22, r22
 d96:	77 1f       	adc	r23, r23
 d98:	88 1f       	adc	r24, r24
 d9a:	99 1f       	adc	r25, r25
 d9c:	1a 94       	dec	r1
 d9e:	69 f7       	brne	.-38     	; 0xd7a <__udivmodsi4_loop>
 da0:	60 95       	com	r22
 da2:	70 95       	com	r23
 da4:	80 95       	com	r24
 da6:	90 95       	com	r25
 da8:	9b 01       	movw	r18, r22
 daa:	ac 01       	movw	r20, r24
 dac:	bd 01       	movw	r22, r26
 dae:	cf 01       	movw	r24, r30
 db0:	08 95       	ret

00000db2 <_exit>:
 db2:	f8 94       	cli

00000db4 <__stop_program>:
 db4:	ff cf       	rjmp	.-2      	; 0xdb4 <__stop_program>
